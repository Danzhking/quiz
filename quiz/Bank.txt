::Сколько фаз имеет процедурная характеристика протокола PPP?{
~3
=2	
~5	
~4
}

::Как называется задача объединения коммитов в git?{
=merge
~cherry-pick	
~branch	
~squash
}

::Дан массив а. Каким образом можно получить первый элемент массива?{
=a[0]
~a.slice(0, 1) 	
~a[1]
~a.first() 
~a(1) 
~a1
}

::Как вызывать графический инструмент разрешения конфликтов?{
~с помощью git stash
=с помощью git mergetool	
~с помощью git resolve	
~с помощью git merge
}

::Какая модель соответствует понятию serverless?{
=Function-as-Service
~Platform-as-Service	
~Code-as-Service	
~Software-as-Service
}

::Что называется безопасным методом в rest API?{
=метод, который не меняет состояние приложения и данных в нем
~метод, который требует использования криптографического протокола 	
~метод, который вернет одинаковый результат независимо от количества обращений с одинаковыми параметрами
~метод, который меняет состояние приложения и данных в нем
}

::Что будет выведено в результате выполнения следующего кода? 
const obj = -( a: 5, b: '6', c: [] )-
obj.a = 7.7
console.log(Object.values(obj).map(x => typeof x)){
=['number', 'string', 'object']
~['string', 'object', 'number']	
~['float', 'string', 'array']
~['number', 'number', 'array', 'number']
~['string', 'string', 'string']
~['number', 'string', 'array']
}

::Компьютерная программа или система, используемая для обеспечения и организации совместного процесса создания, редактирования и управления текстовых и мультимедиа документов (содержимое или контента){
=CMS
~FTP	
~KMS
~RDS
}

::Какие проблемы решает mypy?{
=только поиск ошибок: неправильные вызовы функций, обращение к неопределённым именам, недостигаемый код, проверка аннотаций типов
~только безопасность: известные уязвимости, небезопасные зависимости, вызовы подозрительных функций	
~только стилистические: длина строки, тип кавычек, количество отступов
~только производительность: медленный код, плохие алгоритмы, лишнее выделение памяти
}

::Какая команда служит для создания ссылок на код внешних репозиториев внутри рабочей копии?{
=remote
~branch	
~sync
~submodules
}

::Что из перечисленного является недостатком системы контроля версий Bazaar?{
=скорость работы
~работа с ветками проекта	
~документация
~графический интерфейс
}

::Правильно ли, когда контроллер содержит бизнес-логику?{
=нет, за это отвечает отдельный слой
~да, ведь она не может быть ни в модели, ни в представлении	
~не совсем, контроллер должен делегировать работы
}

::Вы, работая над сайтом, создали ветку в git для новой статьи, которую вы пишите, и намерены начать работать в этой ветке. В этот момент вы получаете сообщение, что обнаружена критическая ошибка, требующая исправления. Что вы сдедаете, чтобы продолжить работу над статьей?{
=Переключусь на основную ветку. Далее создам ветку для добавления исправления. После тестирования солью ветку, содержащую исправление, с основной веткой и переключусь назад в ту ветку, где выпишу статью, и продолжу работать
~Проведу автоматическое сканирование всего существующего контента на github. Затем продолжу работать над статьей в созданной ветке после устранения ошибки	
~Загружу обновленную версию github и продолжу работать над статьей в созданной ветке
~Переключусь на основную ветку. Потом создам ветку для добавления исправления и продолжу работать в ней
}

::Какой протокол взаимодействует на прикладном уровне стека TCP/IP?{
=SMTP
~ICMP	
~UDP
~ARP
}

::Зачем нужна система контроля версий?{
=система позволяет хранить несколько версий одного документа при необходимости возвращаться к более ранним версиям с пониманием, кто и когда вносил изменения
~Система контроля версий позволяет отлаживать код централизованно	
~без систем контроля версий невозможно провести статистический анализ кода
~без систем контроля версий невозможно вести разработку ПО
~система контроля версий позволяет вести параллельную командную разработку, внося изменения в один и тот же проект
}

::Что выведет этот код?
let user = -(
name: «Joe», 
surname: « Black «, 
get fullName() -( return ` $-(this.name)- $-(this.surname)- `;
)-
)-
user.fullName = « Kate Footer «;
alert(user.surname) ;{
=Kate Footer
~Black	
~undefined
~Cooper
~Joe Black
}

::Какое решение для кеширования можно отнести к классическим?{
=memcache
~redis	
~couchbase
~hazelcast
}

::Выберите верные утверждения относительно следующего кода:
class A -()-
class B extends A -()-
class C extends A -()-
class D extends B -()-
class E extends B -()-
class F extends C -()-
class G extends C -()-{
=класс A является родителем всех остальных классов
~Выражение G instanceof A вернет false	
=В класах D и E можно обратиться к полям и методам классов A и B
~Класс A является наследником всех остальных классов
~класс A является родителем только классов B и C 
~Выражение G.prototype.name === 'C' вернет true
}

::В чем разница между `typing.List` и `list`? {
=раньше нельзя было писать `list[int]`, а `typing.List[int]` использовался как вариант Generic вариант `list`. Теперь `typing.List` не нужен
~`typing.List` для хранения данных использует алгоритм связанного спискасписка,  а `list` для хранения данных использует хеш массив	
~один из них — `list` — изменяемый объект из стандартной библиотеки, а `typing.List` — его неизменяемая версия
~Разницы больше нет: теперь они алиасы друг друга, в старых версиях Python `list` был в модуле `typing` с названием `List`. Из-за популярности его перенесли
}

::Что выдаст данный код?
function foo(a) -(
console.log(a) 
)-
function bar(a) -(
console.log(a * 2) 
)-
const buzz = foo
foo = 5
bar = bar(buzz(foo)) 
console.log(bar){
=memcache
~redis	
~couchbase
~hazelcast
}

::Какое решение для кеширования можно отнести к классическим?{
=5;Nan;Undefined
~5;10	
~Foo;NaN;Undefined
~10;Undefined
~Ошибка
}

::Какой протокол разрабатывается на замену SSE?{
=WebTransport
~WebRTL	
~WebDAV
~WebSockets
}

::Когда работа завершена, протестирована и готова к передаче в основную линию разработки, ваша команда должна выбрать стратегию слияния. Какая стратегия позволяет работать в Git с множеством веток, игнорирует все изменения из «чужих» веток и объединяет истории аналогичных функциональных веток, при этом выходной результат слияния всегда соответствует указателю HEAD текущей ветки?{
=стратегия «Наша»
~стратегия «Поддерево»
~стратегия «Осьминог»
~Рекурсивная стратегия
}

::Что такое Redux в JavaScript?{
=библиотека для управления состоянием приложения
~инструмент для определения чистоты функций JavaScript	
~средство интеграции с бэкендом приложения
~инструмент взаимодействия между объектами в рамках дерева страницы
}

::В чем основное отличие ветки hotfix от release и feature при использовании подходов GitFlow?{
=ветка hotfix создаётся напрямую от main ветки
~использование ветки hotfix позволяет не изменять версию ветки main	
~отличия отсутствут, ветка существует лишь для разделения новых фич от исправлений
~ветка hotfix независимая и не сливается с другими 
}

::Чем отличается генератор от итератора в Python?{
=итераторы – это объекты, которые реализуют для доступа к элементам последовательности по одной за раз, а генераторы – это функции, которые используются для создания последовательности значений
~генераторы и итераторы реализуют для доступа к элементам последовательности по одной за раз и ничем не отличаются друг от друга	
~Итераторы – это функции, которые используются для создания последовательности значений, а генераторы – это объекты, которые реализуют для доступа к элементам последовательности по одной за раз
~Генераторы могут быть использованы только с числовыми данными, а итераторы могут работать с любыми типами данных
}

::Nginx — это:{
=HTTP-сервер
~VPN-сервер	
~Почтовый прокси-сервер
~DLNA сервер
=FTP-сервер
}

::Какой заголовок определяет формат данных?{
=Content-Type
~Request-Type	
~Meda-Type
~Data-Type
}

::Каким образом можно хранить значение в Python?{
=Переменная
~Метод	
~Оператор
~Функция
~Класс
}

::Какие системы контроля версий представляют собой приложения типа клиент-сервер, когда репозиторий проекта существует в единственном экземпляре и хранится на сервере, а доступ к нему осуществлялся через специальное клиентское приложение?{
=Централизованные системы контроля версий
~Локальные системы контроля версий
~Децентрализованные системы контроля версий
~Распределённые системы контроля версий
}

::В протоколе TFTP пакет ACQ служит для{
=Подтверждения приема пакета данных или пакета WRQ 
~Запроса с номером блоков 
~Запроса на чтение 
~Запроса на запись 
}

::Какие методы используются для работы с массивами в JavaScript?{
=concat(), slice(), join()
~call(),bind(),apply()	
=map(), filter(), reduce()
=push(), pop(), shift()
}

::Какие из перечисленных вариантов относятся к процессам CI/CD?{
=Развертывание окружений для целевой среды и тестирование
~Формирование бизнес-требований	
~Приемо-сдаточные работы результатов разработки ПО
~Автоматизированное формирование чек-листов по результатам тестирования
=Автоматическая поставка изменений в различные окружения
}

::Какое ключевое слово используется для объявления переменных с блочной областью видимости в JavaScript?{
=let
~block	
~int
~var
~const
}

::В чем ограничения и риски использования локальных систем контроля версий?{
=Работа только с одним файлом, каждый файл должен контролироваться отдельно
~Хранение файлов в строго ограниченном наборе форматов	
~Отсутствие возможности проводить отладку и компилировать код
=При работе нескольких пользователей хранилище блокируется и не позволяет редактировать код в разных ветках
=Отсутствие возможности проведения ревью код
}

::Какой командой git сбросить локальные коммиты до состояния remote?{
=git reset –hard HEAD
~git flush	
~git stash
=git checkout
}

::Каким образом можно получить значение ключа name у объекта a?{
=a.name
~const a = -( name: 'Vasya', age: 20 )-	
~a.get('name')
~a('name')
~a[name]
~a[0]
~a.valueOf('name')
}

::Вы находитесь на собеседовании в ИТ-компанию. Интервьюер предлагает Вам решить следующую задачу. Напишите функцию, которая принимает числовой массив a и число k. Найдите в массиве a два числа, сумма которых равна k. Обратите внимание на эффективность решения. Выберите вопросы, которые могут Вам определить архитектуру решения:{
=В каком виде нужно предоставить результат? Что делать, если пар несколько или их нет?
=Можно ли суммировать числа сами с собой? И что делать, если пар несколько или их нет?	
=Можно ли считать, что на входе только корректные данные, или нужно делать предварительную проверку? И что делать, если пар несколько или их нет?
=Можно ли считать, что на входе только корректные данные, или нужно делать предварительную проверку? И могут ли в массиве и в k быть отрицательные числа?
}

